
button {
  all:unset;
}

/*
.btn :

.btn :

Define variables esenciales como la altura, el ancho y la elevación 3D.
Height: calcula la altura combinando la altura base y la elevación (raise) de las capas de sombra y fondo.
Position: relative es esencial para el efecto de sombra y profundidad, ya que permite que los elementos hijos con posición absoluta tomen como referencia la capa principal.
*/


.btn {
  /*--font_body_family:Ubuntu;
  */
  --height:50px; 
  --width:150px;
  --raise:10px;
  --rounded:5px;
  --rotate:20;
  --rotate_invers:0;
  --border:4px;
  --border_style:solid #004c65 var(--border);
  --bg_front_color:#AAD3EA;
  --bg_front_color_hover:rgba(170,211,234,0.08);
  --bg_shadow_color:#4B4B4B84;
  --bg_back_color:#004c65;
  --font_color:white;
  --font_body_weight:800;
  --font_size:16px;
  height:calc(var(--height) + var(--raise)*2);
  font-family:var(--font_body_family);
  width:calc(var(--width));
  color:var(--font_color);
  font-weight:var(--font_body_weight);
  font-size:var(--font_size);
  position:relative;
}
.btn:active {
  opacity:0.80;
}

/* 

.btn_primary : 

Permite aplicar diferentes combinaciones de colores y efectos sin duplicar la estructura principal del botón,
ejemplo: '.btn_primary', '.btn_secondary', etc.

*/
.btn_primary {
  --bg_shadow_color:rgba(217,217,217,0.7);
  --bg_front_color:#FF1F48;
  --bg_back_color:#E00029;
  --border_style:solid #FF4769 var(--border);
  --font_color:#fff;
}

/*
.btn_shadow:before

Capa de sombra, al crear la sombra con un pseudo-elemento (:before) y
position: absolute, la sombra se puede diseñar, mover y estilizar independientemente del contenido del botón,
usando un margin-top desplazamos hacia abajo dos veces la elevacion la de la sombra + la capa intermedia.

*/
.btn_shadow:before {
  content:" ";
  position:absolute; 
  top:0;
  height:calc(var(--height));
  margin-top:calc(var(--raise)*2);
  width:var(--width);
  background:var(--bg_shadow_color);
  border-radius:var(--rounded);
  border:var(--border) solid transparent;
}
/*
.btn .btn_back:before

 Capa de intermedia, situada entre la sombra y la capa frontal del botón, 
 se comporta de manera similar a la sombra, pero desplazada solo una vez en lugar de dos, usando margin-top.

*/
.btn .btn_back:before {
  content:" ";
  position:absolute;
  top:0;
  height:calc(var(--height));
  margin-top:var(--raise);
  width:var(--width);
  background:var(--bg_back_color);
  border-radius:var(--rounded);
  transition:transform 0.2s ease-out;
  border:var(--border) solid transparent;
}

/*

.btn_front:

La capa visible del botón, que está posicionada sobre las demás capas, position: absolute la coloca en la parte superior.
El contenido se centra vertical y horizontalmente con display: flex.

*/
.btn .btn_front {
  position:absolute;
  height:calc(var(--height));
  width:calc(var(--width));
  top:0;
  background:var(--bg_front_color);
  display:flex;
  align-items:center;
  justify-content:center;
  border-radius:var(--rounded);
  border:var(--border_style);
  transition:transform 0.2s ease-out;
}
/*
¿Por qué se usa content: " ";?
Sin content, los pseudo-elementos ::before o ::after no se renderizan en absoluto. Al establecer content: " ";, 
aunque el contenido sea vacío, 
permite que el pseudo-elemento se muestre y que los demás estilos (como background, position, y height) se apliquen.
*/

/*btn_shadow events*/
.btn_shadow_left:before {
  transition:transform 0.2s ease-out;
  transform:skewY(calc(1deg * var(--rotate_invers))) translateY(calc((var(--raise)*0.6) * -1 ));
}
.btn_shadow_right:before {
  transition:transform 0.2s ease-out;
  transform:skewY(calc(1deg * var(--rotate))) translateY(calc((var(--raise)*0.6) * -1 ));
}
.btn_shadow_default:before {
  transform:skew(0) translateZ(0);
}
.btn_shadow_default:hover:before {
  transform:translateY(calc((var(--raise) / 2) * -1 ));
}
.btn_shadow_default:active:before {
  transform:translateY(calc((var(--raise)) * -1 ));
}
.btn_shadow_left:active:before {
  transform:translateY(calc((var(--raise)) * -1 ));
}
.btn_shadow_right:active:before {
  transform:translateY(calc((var(--raise)) * -1 ));
}
/*btn_front events*/
  .btn_front_left {
  transform:skewY(calc(1deg * var(--rotate_invers)));
}
.btn_front_right {
  transform:skewY(calc(1deg * var(--rotate)));
  transition:transform 0.2s ease-out;
}
.btn_front_default {
  transform:skew(0) translateZ(0);
  transition:transform 0.2s ease-out;
}
.btn_front_left:active {
  transform:skewY(0) translateY(var(--raise));
}
.btn_front_right:active {
  transform:skewY(0) translateY(var(--raise));
}
.btn_front_default:hover {
  transform:translateY(calc(var(--raise)/ 2 ));
}
.btn_front_default:active {
  transform:skewY(0) translateY(var(--raise));
}
/*loading*/
  .btn_loading_wrapp {
  position:absolute;
  height:var(--height);
  width:var(--width);
  margin-left:calc(var(--border)*-1);
  /* padding for borders of parent */
    margin-right:calc(var(--border)*-1);
  /* padding for borders of parent */
    background:var(--bg_back_color);
  /*display:flex;
  */
    align-items:center;
  justify-content:center;
  border-radius:var(--rounded);
  border:var(--border_style);
  overflow:hidden;
  z-index:1;
}
.btn_loading_wrapp:before {
  content:" ";
  position:absolute;
  height:var(--height);
  width:0;
  left:0;
  right:0;
  background:var(--bg_front_color);
  z-index:-1;
}
.btn_loading_slideInLeft:before {
  width:100%;
  transition:width 1s ease-in;
}
/*text and animation */
  .btn_loading_wrapp .txt_loading {
  animation:slide-up 0.5s ease-in-out;
  position:absolute
}
.btn_loading_wrapp .txt_loaded {
  animation:slide-down 0.5s ease-in-out;
  position:absolute
}
@keyframes slide-down {
  0% {
  transform:translateY(-150%);
  opacity:0;
}
100% {
  transform:translateY(0);
  opacity:1;
}
}
@keyframes slide-up {
  0% {
  transform:translateY(150%);
  opacity:0;
}
100% {
  transform:translateY(0);
  opacity:1;
}
}
.bubble {
  /*--bg_front_color:var(--bg_front_color);
  */
    /*--bg_back_color:var(--bg_back_color);
  */
    width:100%;
  height:100%;
  background-color:transparent;
  overflow:hidden;
  transform:translate(0,0);
  border-radius:calc(var(--rounded) - 10);
}
.bubble .water {
  position:absolute;
  background-color:transparent;
  left:0;
  top:0;
  z-index:2;
  width:100%;
  height:100%;
  -webkit-transform:translate(0,100%);
  transform:translate(0,100%);
}
.bubble .water_wave_back {
  width:200%;
  left:0;
  top:0;
  position:relative;
  fill:var(--bg_front_color);
  opacity:0.7;
  animation:wave-back 0.8s infinite linear;
}
.bubble .water_wave_front {
  margin-top:8px;
  width:200%;
  left:0;
  top:0;
  position:absolute;
  fill:var(--bg_front_color);
  animation:wave-front 0.6s infinite linear;
}
.liquid {
  background:var(--bg_front_color);
  width:100%;
  height:150%;
  margin-top:-6px;
}
@keyframes wave-front {
  100% {
  transform:translate(-50%,0);
}
}@keyframes wave-back {
  100% {
  transform:translate(-50%,0);
}
}